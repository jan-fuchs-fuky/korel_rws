#!/usr/bin/env python2.5
# -*- coding: utf-8 -*-

""" Korel sheduler """

#
# Author: Jan Fuchs <fuky@sunstel.asu.cas.cz>
# $Date$
# $Rev$
#

import os
import sys
import time
import logging
import signal
import ConfigParser
from optparse import OptionParser

script_path = os.path.dirname(os.path.realpath(os.path.abspath(sys.argv[0])))
sys.path.append(os.path.abspath("%s/lib" % script_path))
os.chdir(script_path)

import share

__version__ = "0.1.0"

KOREL_SCHEDULER_PID = "./var/run/korel_scheduler.pid"
KOREL_QUEUE_PATH = "./var/queue"
KOREL_SCHEDULER_LOG = "./var/log/korel_scheduler.log"

class KorelScheduler():
    def __init__(self):
        self.user_settings = {}
        self.user_settings_mtime = 0
        self.settings = {
            "max_process": 0,
            "max_memory": 0,
            "max_disk_space": 0,
            "max_runtime": 0,
        }

        self.logger = logging.getLogger("korel_sheduler")
        self.logger.setLevel(logging.DEBUG)

        formatter = logging.Formatter("%(asctime)s - %(name)s[%(process)d] - %(levelname)s - %(message)s")
        fh = logging.FileHandler(KOREL_SCHEDULER_LOG)
        fh.setLevel(logging.DEBUG)
        fh.setFormatter(formatter)
        self.logger.addHandler(fh)

        option_parser = OptionParser()

        option_parser.add_option("-d", "--daemonize", dest="daemonize", default=None, action="store_true")
        option_parser.add_option("-c", "--conf", dest="conf", default="korel_rws.cfg")

        (options, args) = option_parser.parse_args()
        #print "options: %s, args: %s" % (options, args)

        if (options.daemonize):
            share.daemonize()

        share.create_pid(KOREL_SCHEDULER_PID)

        self.logger.info("starting korel_sheduler %s" % __version__)

        cfg = ConfigParser.RawConfigParser()
        cfg.read("%s/etc/%s" % (os.path.dirname(__file__), options.conf))

        self.settings["max_process"] = cfg.getint("korel", "max_process")
        self.settings["max_memory"] = cfg.getint("korel", "max_memory")
        self.settings["max_disk_space"] = cfg.getint("korel", "max_disk_space")
        self.settings["max_runtime"] = cfg.getint("korel", "max_runtime")

    def run(self):
        try:
            self.user_settings_mtime = time.time()
            self.user_settings = share.load_user_settings()
        except:
            self.logger.exception("exception")

        while (1):
            count = self.get_process_count()
            count = self.settings["max_process"] - count
            if (count > 0):
                self.process_queue(count)
            time.sleep(1)

    def kill_long_run_job(self, user, job_dir_path, pid):
        if (self.user_settings[user].has_key("max_runtime")):
            max_runtime = self.user_settings[user]["max_runtime"]
        else:
            max_runtime = self.settings.max_runtime

        fo = open("%s/startTime" % job_dir_path, "r")
        startTime = int(fo.readline().strip())
        fo.close()

        if (time.time() - startTime) > (max_runtime * 60):
            self.logger.info("%s kill %i" % (job_dir_path, pid))
            os.system("./korel_kill %i &" % pid)

    def get_process_count(self):
        process_count = 0
    
        user_dirs = os.listdir(share.KOREL_JOBS_PATH)
        for user_dir in user_dirs:
            user_dir_path = "%s/%s" % (share.KOREL_JOBS_PATH, user_dir)
            if (not os.path.isdir(user_dir_path)) or (user_dir[0] == "."):
                continue 
 
            try:
                new_user_settings = share.refresh_user_settings(user_dir, self.user_settings_mtime)
                if (new_user_settings):
                    self.logger.info("Load changed user '%s'" % user_dir)
                    self.user_settings.update({user_dir: new_user_settings})
            except:
                self.logger.exception("exception")

            job_dirs = os.listdir(user_dir_path)
            for job_dir in job_dirs:
                job_dir_path =  "%s/%s" % (user_dir_path, job_dir)
                korel_pid = "%s/korel.pid" % job_dir_path
                try:
                    fo = open(korel_pid, "r")
                    pid = int(fo.readline().strip())
                    fo.close()
    
                    cwd = os.readlink("/proc/%i/cwd" % pid)
                    if (os.path.abspath(job_dir_path) == cwd):
                        process_count += 1
    
                    self.kill_long_run_job(user_dir, job_dir_path, pid)
                except Exception, e:
                    #print repr(e)
                    pass
    
        return process_count
    
    def process_queue(self, count):
        queue = []
        for job in os.listdir(KOREL_QUEUE_PATH):
            job_path = "%s/%s" % (KOREL_QUEUE_PATH, job)
            if (os.path.isfile(job_path)):
                queue.append([os.stat(job_path).st_mtime, job_path])
        queue.sort()
        queue_len = len(queue)
    
        i = 0
        while (i < count) and (queue_len > i):
            job_path = queue[i][1]
    
            fo = open(job_path, "r")
            job_dir = fo.readline().strip()
            fo.close()
    
            fo = open("%s/grant" % job_dir, "w")
            fo.write("%i\n" % os.getpid())
            fo.close()
    
            os.remove(job_path)
            self.logger.info("%s granted" % job_dir)
    
            i += 1

def korel_scheduler_exit():
    if (os.path.isfile(KOREL_SCHEDULER_PID)):
        os.remove(KOREL_SCHEDULER_PID)

    korel_scheduler.logger.info("exit")

def handler(signum, frame):
    korel_scheduler.logger.info("receive signal %s" % signum)
    korel_scheduler_exit()
    sys.exit(1)

def main():
    try:
        signal.signal(signal.SIGTERM, handler)
        korel_scheduler.run()
    except:
        korel_scheduler.logger.exception("exception")
    finally:
        korel_scheduler_exit()

if __name__ == '__main__':
    korel_scheduler = KorelScheduler()
    main()
